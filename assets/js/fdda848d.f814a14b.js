"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[679],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},h=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,u=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(u,o(o({ref:t},h),{},{components:a})):n.createElement(u,o({ref:t},h))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3326:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={},o="Compute",s={unversionedId:"Lab/Compute/README",id:"Lab/Compute/README",title:"Compute",description:"The main criterion we use to rank CPUs is their computation power, i.e. their ability to crunch numbers and do math.",source:"@site/docs/Lab/Compute/README.md",sourceDirName:"Lab/Compute",slug:"/Lab/Compute/",permalink:"/operating-systems-oer/Lab/Compute/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lab",permalink:"/operating-systems-oer/Lab/"}},l={},p=[{value:"The Role of the Operating System",id:"the-role-of-the-operating-system",level:2},{value:"Processes",id:"processes",level:2},{value:"Sum of the Elements in an Array",id:"sum-of-the-elements-in-an-array",level:2},{value:"Spreading the Work Among Other Processes",id:"spreading-the-work-among-other-processes",level:3},{value:"Practice: Baby steps - Python",id:"practice-baby-steps---python",level:4},{value:"Practice: High level - Python",id:"practice-high-level---python",level:4},{value:"Practice: Lower level - C",id:"practice-lower-level---c",level:4},{value:"Practice: Wait for Me!",id:"practice-wait-for-me",level:4},{value:"Practice: <code>fork()</code>",id:"practice-fork",level:4},{value:"Spreading the Work Among Other Threads",id:"spreading-the-work-among-other-threads",level:3},{value:"Practice: Wait for Me Once More!",id:"practice-wait-for-me-once-more",level:4},{value:"Threads vs Processes",id:"threads-vs-processes",level:3},{value:"Safety",id:"safety",level:4},{value:"Practice: Wait for It!",id:"practice-wait-for-it",level:4},{value:"Memory Corruption",id:"memory-corruption",level:4},{value:"Usage of Processes and Threads in <code>apache2</code>",id:"usage-of-processes-and-threads-in-apache2",level:2},{value:"<code>apache2</code> Live Action",id:"apache2-live-action",level:3},{value:"Practice: Investigate <code>apache2</code> Using <code>strace</code>",id:"practice-investigate-apache2-using-strace",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Copy-on-Write",id:"copy-on-write",level:2},{value:"Practice",id:"practice",level:4},{value:"Synchronisation",id:"synchronisation",level:2},{value:"Race Conditions",id:"race-conditions",level:3},{value:"Synchronisation - Overhead",id:"synchronisation---overhead",level:4},{value:"Practice: Wrap the Whole <code>for</code> Statements in Critical Sections",id:"practice-wrap-the-whole-for-statements-in-critical-sections",level:4},{value:"Atomics",id:"atomics",level:3},{value:"Semaphores",id:"semaphores",level:3},{value:"Practice: <code>apache2</code> Simulator - Semaphore",id:"practice-apache2-simulator---semaphore",level:4},{value:"Conditions",id:"conditions",level:3},{value:"Practice: <code>apache2</code> Simulator - Condition",id:"practice-apache2-simulator---condition",level:4},{value:"Thread-Local Storage (TLS)",id:"thread-local-storage-tls",level:2},{value:"Practice: D - TLS by Default",id:"practice-d---tls-by-default",level:4},{value:"Practice: C - TLS on Demand",id:"practice-c---tls-on-demand",level:4},{value:"Scheduling",id:"scheduling",level:2},{value:"User-Level vs Kernel-Level Threads",id:"user-level-vs-kernel-level-threads",level:3},{value:"Practice: User-Level Threads Scheduler",id:"practice-user-level-threads-scheduler",level:3},{value:"Thread Control Block",id:"thread-control-block",level:3},{value:"Preemption",id:"preemption",level:3},{value:"Cooperative Scheduling",id:"cooperative-scheduling",level:4},{value:"Preemptive Scheduling",id:"preemptive-scheduling",level:4},{value:"Practice: Another Time Slice",id:"practice-another-time-slice",level:4},{value:"Arena",id:"arena",level:2},{value:"Threads and Processes: <code>clone</code>",id:"threads-and-processes-clone",level:3},{value:"Libraries for Parallel Processing",id:"libraries-for-parallel-processing",level:3},{value:"Shared Memory",id:"shared-memory",level:3},{value:"Mini-shell",id:"mini-shell",level:3},{value:"Fist Step: <code>system</code> Dissected",id:"fist-step-system-dissected",level:4},{value:"Command Executor in Another language",id:"command-executor-in-another-language",level:4},{value:"The GIL",id:"the-gil",level:3},{value:"Practice: Array Sum in Python",id:"practice-array-sum-in-python",level:4},{value:"But Why?",id:"but-why",level:4},{value:"Atomic Assembly",id:"atomic-assembly",level:3},{value:"Synchronisation - Thread-Safe Data Structure",id:"synchronisation---thread-safe-data-structure",level:3}],h={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"compute"},"Compute"),(0,r.kt)("p",null,"The main criterion we use to rank CPUs is their ",(0,r.kt)("em",{parentName:"p"},"computation power"),", i.e. their ability to crunch numbers and do math.\nNumerous benchmarks exist out there and they are publicly displayed on websites such as ",(0,r.kt)("a",{parentName:"p",href:"https://www.cpubenchmark.net/"},"CPUBenchmark"),"."),(0,r.kt)("p",null,"This benchmark measures the performance of the computer's CPU in a variety of scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"its ability to perform integer operations"),(0,r.kt)("li",{parentName:"ul"},"its speed in floating point arithmetic"),(0,r.kt)("li",{parentName:"ul"},"data encryption and compression"),(0,r.kt)("li",{parentName:"ul"},"sorting algorithms and others")),(0,r.kt)("p",null,"You can take a look at what exactly is measured using ",(0,r.kt)("a",{parentName:"p",href:"https://www.cpubenchmark.net/cpu.php?cpu=AMD+Ryzen+Threadripper+PRO+5995WX"},"this link"),".\nIt displays the scores obrtained by a high-end CPU.\nApart from the tests above, other benchmarks can also focus on other performance metrics such as branch prediction or prefetching."),(0,r.kt)("p",null,"Other approaches are less artificial, measuring performance on real-world applications such as compile times and performance in the lastest (and most resource-demandign) video games.\nThe latter metric revolves around how many average FPS (frames per second) a given CPU is able to crank out in a specific video game.\n",(0,r.kt)("a",{parentName:"p",href:"https://www.gamersnexus.net/guides/3577-cpu-test-methodology-unveil-for-2020-compile-gaming-more"},"This article")," goes into more detail regarding the methodology of running CPU benchmarks on real-world applications."),(0,r.kt)("p",null,"Most benchmarks, unfortunately, are not open source, especially the more popular ones, such as ",(0,r.kt)("a",{parentName:"p",href:"https://browser.geekbench.com/processor-benchmarks"},"Geekbench 5"),".\nDespite this shortcoming, benchmarks are widely used to compare the performance of various computer ",(0,r.kt)("strong",{parentName:"p"},"hardware"),", CPUs included."),(0,r.kt)("h2",{id:"the-role-of-the-operating-system"},"The Role of the Operating System"),(0,r.kt)("p",null,'As you\'ve seen so far, the CPU provides the "muscle" requried for fast computation. i.e. the highly optimised hardware and multiple ALUs, FPUs\nand cores necessary to perform those computations.\nHowever, it is the ',(0,r.kt)("strong",{parentName:"p"},"operating system"),' that provides the "brains" for this computation.\nSpecifically, modern CPUs have the capacity to run multiple tasks in parallel.\nBut they do not provide a means to decide which task to run at each moment.\nThe OS comes as an ',(0,r.kt)("em",{parentName:"p"},"orchestrator")," to ",(0,r.kt)("strong",{parentName:"p"},"schedule")," the way these tasks (that we will later call threads) are allowed to run and use the CPU's resources.\nThis way OS tells the CPU what code to run on each CPU core so that it reaches a good balance between high throughput (running many instructions) and fair access to CPU cores."),(0,r.kt)("p",null,"It is cumbersome for a user-level application to interact directly with the CPU.\nThe developer would have to write hardware-specific code which is not scalable and is difficult to maintain.\nIn addition, doing so would leave it up to the developer to isolate their application from the others that are present on the system.\nThis leaves applications vulnerable to countless bugs and exploits."),(0,r.kt)("p",null,"To guard apps from these pitfalls, the OS comes and mediates interactions between regular programs and the CPU by providing a set of ",(0,r.kt)("strong",{parentName:"p"},"abstractions"),".\nThese abstractions offer a safe, uniform and also isolated way to leverage the CPU's resources, i.e. its cores.\nThere are 2 main abstractions: ",(0,r.kt)("strong",{parentName:"p"},"processes")," and ",(0,r.kt)("strong",{parentName:"p"},"threads"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Interaction between applications, OS and CPU",src:a(2163).Z,width:"772",height:"772"})),(0,r.kt)("p",null,"As we can see from the image above, an application can spawn one or more processes.\nEach of these is handled and maintained by the OS.\nSimilarly, each process can spawn however many threads, which are also managed by the OS.\nThe OS decides when and on what CPU core to make each thread run.\nThis is in line with the general of interaction between an application and the hardware: it is always mediated by the OS."),(0,r.kt)("h2",{id:"processes"},"Processes"),(0,r.kt)("p",null,"A process is simply a running program.\nLet's take the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," command as a trivial example.\n",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," is a ",(0,r.kt)("strong",{parentName:"p"},"program")," on your system.\nIt has a binary file which you can find and inspect with the help of the ",(0,r.kt)("inlineCode",{parentName:"p"},"which")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~$ which ls\n/usr/bin/ls\n\nstudent@os:~$ file /usr/bin/ls\n/usr/bin/ls: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6e3da6f0bc36b6398b8651bbc2e08831a21a90da, for GNU/Linux 3.2.0, stripped\n")),(0,r.kt)("p",null,"When you run it, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," binary stored ",(0,r.kt)("strong",{parentName:"p"},"on the disk")," at ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/bin/ls")," is read by another application called the ",(0,r.kt)("strong",{parentName:"p"},"loader"),".\nThe loader spawns a ",(0,r.kt)("strong",{parentName:"p"},"process")," by copying some of the contents ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/bin/ls")," in memory (such as the ",(0,r.kt)("inlineCode",{parentName:"p"},".text"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".rodata")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".data")," sections).\nUsing ",(0,r.kt)("inlineCode",{parentName:"p"},"strace"),", we can see the ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/execve.2.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execve"))," system call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'student@os:~$ strace -s 100 ls -a  # -s 100 limits strings to 100 bytes instead of the default 32\nexecve("/usr/bin/ls", ["ls", "-a"], 0x7fffa7e0d008 /* 61 vars */) = 0\n[...]\nwrite(1, ".  ..  content\\tCONTRIBUTING.md  COPYING.md  .git  .gitignore  README.md  REVIEWING.md\\n", 86.  ..  content   CONTRIBUTING.md  COPYING.md  .git  .gitignore  README.md  REVIEWING.md\n) = 86\nclose(1)                                = 0\nclose(2)                                = 0\nexit_group(0)                           = ?\n+++ exited with 0 +++\n')),(0,r.kt)("p",null,"Look at its parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the path to the ",(0,r.kt)("strong",{parentName:"li"},"program"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"/usr/bin/ls")),(0,r.kt)("li",{parentName:"ul"},"the list of arguments: ",(0,r.kt)("inlineCode",{parentName:"li"},'"ls", "-a"')),(0,r.kt)("li",{parentName:"ul"},"the enivronment variables: the rest of the syscall's arguments")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"execve")," invokes the loader to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," process.\nAll subsequent syscalls are performed by the newly spawned ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," process.\nWe will get into more details regarding ",(0,r.kt)("inlineCode",{parentName:"p"},"execve")," ",(0,r.kt)("a",{parentName:"p",href:"#TODO-section"},"towards the end of this lab"),"."),(0,r.kt)("p",null,"TODO - image: creation of a process - loader"),(0,r.kt)("h2",{id:"sum-of-the-elements-in-an-array"},"Sum of the Elements in an Array"),(0,r.kt)("p",null,"Let's assume we only have one process on our system and that process knows how to add the numbers in an array.\nIt can use however many resources it wants since there is no other process to contest it.\nIt would probabily look like the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array/d/sum_array_sequential.d"),".\nThe program also measures the time spent computing the sum.\nLet's compile and run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../lab/support/sum-array/d$ ./sum_array_sequential\nArray sum is: 49945994146\nTime spent: 127 ms\n")),(0,r.kt)("p",null,"You will most likely get a different sum (because the array is made up of random numbers) and a different time than the ones shown above.\nThis is perfectly fine.\nUse these examples qualitatively, not quantitatively."),(0,r.kt)("h3",{id:"spreading-the-work-among-other-processes"},"Spreading the Work Among Other Processes"),(0,r.kt)("p",null,"Due to how it's implemented so far, our program only uses one of our CPU's cores.\nWe never tell it to distribute its workload on other cores.\nThis is wasteful as the rest of our cores remain unused:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~$ lscpu | grep ^CPU\\(s\\):\nCPU(s):                          8\n")),(0,r.kt)("p",null,"We have 7 more cores waiting to add numbers in our array."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"What if we used 100% of the CPU?",src:a(9886).Z,width:"541",height:"500"})),(0,r.kt)("p",null,"What if we use 7 more processes between which we spread the task of adding the numbers in this array?\nIf we split the array into several equal parts and designate a separate process to calculate the sum of each part, we should get a speedup because now the work performed by each individual process is reduced."),(0,r.kt)("p",null,"Let's take it methodically.\nCompile and run ",(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_processes.d")," using 1, 2, 4 and 8 processes respectively.\nIf your system only has 4 cores (",(0,r.kt)("a",{parentName:"p",href:"https://www.intel.com/content/www/us/en/gaming/resources/hyper-threading.html"},"hyperthreading")," included), limit your runs to 4 processes.\nNote the running times for each number of processes.\nWe expect the speedups compared to our reference run to be 1, 2, 4 and 8 respectively, right?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/processes-speedup"},"Quiz")),(0,r.kt)("p",null,"You most likely did get some speedup, especially when using 8 processes.\nNow we will try to improve this speedup by using ",(0,r.kt)("strong",{parentName:"p"},"threads")," instead."),(0,r.kt)("p",null,"Also notice that we're not using hundreds or thousands of processes.\nAssuming our system has 8 cores, only 8 ",(0,r.kt)("em",{parentName:"p"},"threads")," (we'll see this later in the lab) can run at the same time.\nIn general, ",(0,r.kt)("strong",{parentName:"p"},"the maximum number of threads that can run at the same time is equal to the number of cores"),".\nIn our example, each process only has one thread: its main thread.\nSo by consequence and by forcing the terminology (because it's the main thread of these processes that is running, not the processes themselves), we can only run in parallel a number of processes equal to at most the number of cores."),(0,r.kt)("h4",{id:"practice-baby-steps---python"},"Practice: Baby steps - Python"),(0,r.kt)("p",null,"Run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/create-process/popen.py"),".\nIt simply spawns a new process running the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," command using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/subprocess.html#subprocess.Popen"},(0,r.kt)("inlineCode",{parentName:"a"},"subprocess.Popen()")),".\nDo not worry about the huge list of arguments that ",(0,r.kt)("inlineCode",{parentName:"p"},"Popen()")," takes.\nThey are used for inter-process-communication.\nYou'll learn more about this in the ",(0,r.kt)("a",{parentName:"p",href:"../../app-interact/"},"Application Interaction chapter"),"."),(0,r.kt)("p",null,"Note that this usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"Popen()")," is not entirely correct.\nYou'll discover why in the next exercise, but for now focus on simply understanding how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"Popen()")," on its own."),(0,r.kt)("p",null,"Now change the command to anything you want.\nAlso give it some arguments.\nFrom the outside, it's as if you were running these commands from the terminal."),(0,r.kt)("h4",{id:"practice-high-level---python"},"Practice: High level - Python"),(0,r.kt)("p",null,"Head over to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sleepy/sleepy_creator.py"),".\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"subprocess.Popen()")," to spawn 10 ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep 1000")," processes."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Now use the same ",(0,r.kt)("inlineCode",{parentName:"li"},"pstree -pac")," command and look for ",(0,r.kt)("inlineCode",{parentName:"li"},"sleepy_creator.py"),".\nIt is a ",(0,r.kt)("inlineCode",{parentName:"li"},"python3")," process, as this is the interpreter that runs the script, but we call it the ",(0,r.kt)("inlineCode",{parentName:"li"},"sleepy_creator.py")," process for simplicity.\nIf you found it, you did something wrong.\nIt should be missing.\nNow use ",(0,r.kt)("inlineCode",{parentName:"li"},"pstree -pac")," and look for the ",(0,r.kt)("inlineCode",{parentName:"li"},"sleep")," processes you have just created.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/parent-of-sleep-processes"},"Quiz")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Change the code in ",(0,r.kt)("inlineCode",{parentName:"li"},"sleepy_creator.py")," so that the ",(0,r.kt)("inlineCode",{parentName:"li"},"sleep 1000")," processes are the children of ",(0,r.kt)("inlineCode",{parentName:"li"},"sleepy_creator.py"),".\nKill the previously created ",(0,r.kt)("inlineCode",{parentName:"li"},"sleep")," processes using ",(0,r.kt)("inlineCode",{parentName:"li"},"killall sleep"),".\nVerify that ",(0,r.kt)("inlineCode",{parentName:"li"},"sleepy_creator.py")," remains the parent of the ",(0,r.kt)("inlineCode",{parentName:"li"},"sleep"),"s it creates using ",(0,r.kt)("inlineCode",{parentName:"li"},"pstree -pac"),".")),(0,r.kt)("h4",{id:"practice-lower-level---c"},"Practice: Lower level - C"),(0,r.kt)("p",null,"Now let's see how to create a child process in C.\nThere are multiple ways of doing this.\nFor now, we'll start with a higher-level approach."),(0,r.kt)("p",null,"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sleepy/sleepy_creator.c")," and use ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/system.3.html"},(0,r.kt)("inlineCode",{parentName:"a"},"system"))," to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep 1000")," process."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/create-sleepy-process-ending"},"Quiz")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"man")," page also mentions that ",(0,r.kt)("inlineCode",{parentName:"p"},"system")," calls ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"exec()")," to run the command it's given.\nIf you want to find out more about them, head over to the ",(0,r.kt)("a",{parentName:"p",href:"#mini-shell"},"Arena and create your own mini-shell"),"."),(0,r.kt)("h4",{id:"practice-wait-for-me"},"Practice: Wait for Me!"),(0,r.kt)("p",null,"Run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/wait-for-me/wait_for_me_processes.py"),".\nThe parent process creates one child that writes and message to the given file.\nThen the parent reads that message.\nSimple enough, right?\nBut running the code raises a ",(0,r.kt)("inlineCode",{parentName:"p"},"FileNotFoundError"),".\nIf you inspect the file you gave the script as an argument, it does contain a string.\nWhat's going on?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/cause-of-file-not-found-error"},"Quiz")),(0,r.kt)("p",null,"In order to solve race conditions, we need ",(0,r.kt)("strong",{parentName:"p"},"synchronisation"),".\nThis is a mechanism similar to a set of traffic lights in a crossroads.\nJust like traffic lights allow some cars to pass only after others have already passed, synchronisation is a means for threads to communicate with each other and tell each other to access a resource or not."),(0,r.kt)("p",null,"The most basic form of synchronisation is ",(0,r.kt)("strong",{parentName:"p"},"waiting"),".\nConcretely, if the parent process ",(0,r.kt)("strong",{parentName:"p"},"waits")," for the child to end, we are sure the file is created and its contents are written.\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"join()")," to make the parent wait for its child before reading the file."),(0,r.kt)("h4",{id:"practice-fork"},"Practice: ",(0,r.kt)("inlineCode",{parentName:"h4"},"fork()")),(0,r.kt)("p",null,"Up to now we've been creating processes using various high-level APIs, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Popen()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Process()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"system()"),".\nYes, despite being a C function, as you've seen from its man page, ",(0,r.kt)("inlineCode",{parentName:"p"},"system()")," itself calls 2 other functions: ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," to create a process and ",(0,r.kt)("inlineCode",{parentName:"p"},"execve()")," to execute the given command.\nAs you already know from the ",(0,r.kt)("a",{parentName:"p",href:"../../software-stack/"},"Software Stack")," chapter, library functions may call one or more underlying system calls or other functions.\nNow we will move one step lower on the call stack and call ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," ourselves."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," creates one child process that is ",(0,r.kt)("em",{parentName:"p"},"almost")," identical to its parent.\nWe say that ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," returns ",(0,r.kt)("strong",{parentName:"p"},"twice"),": once in the parent process and once more in the child process.\nThis means that after ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," returns, assuming no error has occurred, both the child and the parent resume execution from the same place: the instruction following the call to ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()"),".\nWhat's different between the two processes is the value returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"child process"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"fork()")," returns 0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"parent process"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"fork()")," returns the PID of the child process (> 0)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"on error"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"fork()")," returns -1, only once, in the initial process")),(0,r.kt)("p",null,"Therefore, the typical code for handling a ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," is available in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/create-process/fork.c"),".\nTake a look at it and then run it.\nNotice what each of the two processes prints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the PID of the child is also known by the parent"),(0,r.kt)("li",{parentName:"ul"},"the PPID of the child is the PID of the parent")),(0,r.kt)("p",null,"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"system()"),", who also waits for its child, when using ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," we must do the waiting ourselves.\nIn order to wait for a process to end, we use the ",(0,r.kt)("a",{parentName:"p",href:"https://linux.die.net/man/2/waitpid"},(0,r.kt)("inlineCode",{parentName:"a"},"waitpid()"))," syscall.\nIt places the exit code of the child process in the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," parameter.\nThis argument is actually a bitfield containing more information that merely the exit code.\nTo retrieve the exit code, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"WEXITSTATUS")," macro.\nKeep in mind that ",(0,r.kt)("inlineCode",{parentName:"p"},"WEXITSTATUS")," only makes sens if ",(0,r.kt)("inlineCode",{parentName:"p"},"WIFEXITED")," is true, i.e. if the child process finished on its own and wasn't killed by another one or by an illegal action (such as a seg fault or illegal instruction) for example.\nOtherwise, ",(0,r.kt)("inlineCode",{parentName:"p"},"WEXITSTATUS")," will return something meaningless.\nYou can view the rest of the information stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," bitfield ",(0,r.kt)("a",{parentName:"p",href:"https://linux.die.net/man/2/waitpid"},"in the man page"),"."),(0,r.kt)("p",null,"Now modify the example to do the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Change the return value of the child process so that the value displayed by the parent is changed.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'Create a child process of the newly created child.\nUse a similar logic and a similar set of prints to those in the support code.\nTake a look at the printed PIDs.\nMake sure the PPID of the "grandchild" is the PID of the child, whose PPID is, in turn, the PID of the parent.'))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Moral of the story"),": Usually the execution flow is ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()"),", followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"wait()")," (called by the parent) ",(0,r.kt)("inlineCode",{parentName:"p"},"exit()"),", called by the child.\nThe order of last 2 steps may be swapped."),(0,r.kt)("h3",{id:"spreading-the-work-among-other-threads"},"Spreading the Work Among Other Threads"),(0,r.kt)("p",null,"Compile the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array/d/sum_array_threads.d")," and run it using 1, 2, 4 and 8 threads as you did before.\nEach thread runs the ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateArrayPartSum")," function and then finishes.\nRunning times should be ",(0,r.kt)("em",{parentName:"p"},"slightly")," smaller than the implementation using processes.\nThis slight time difference is caused by process creation actions, which are costlier than thread creation actions.\nBecause a process needs a separate virtual address space (VAS) and needs to duplicate some internal structures such as the file descriptor table and page table, it takes the operating system more time to create it than to create a thread.\nOn the other hand, threads belonging to the same process share the same VAS and, implicitly, the same OS-internal structures.\nTherefore, they are more lightweight than processes."),(0,r.kt)("h4",{id:"practice-wait-for-me-once-more"},"Practice: Wait for Me Once More!"),(0,r.kt)("p",null,"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/wait-for-me/wait_for_me_threads.d"),".\nSpawn a thread that executes the ",(0,r.kt)("inlineCode",{parentName:"p"},"negateArray()")," function.\nFor now, do not wait for it to finish; simply start it."),(0,r.kt)("p",null,"Compile the code and run the resulting executable several times.\nSee that the negative numbers appear from different indices.\nThis is precisely the nondeterminism that we talked about ",(0,r.kt)("a",{parentName:"p",href:"#practice-wait-for-me"},"in the previous section"),"."),(0,r.kt)("p",null,"Now wait for that thread to finish and see that all the printed numbers are consistently negative."),(0,r.kt)("p",null,"As you can see, waiting is a very coarse form of synchronisation.\nIf we only use waiting, we can expect no speedup as a result of parallelism, because one thread must finish completely before another can continue.\nWe will discuss more fine-grained synchronisation mechanisms ",(0,r.kt)("a",{parentName:"p",href:"#synchronisation"},"later in this lab"),"."),(0,r.kt)("p",null,"Also, at this point, you might be wondering why this exercise is written in D, while ",(0,r.kt)("a",{parentName:"p",href:"#practice-wait-for-me"},"the same exercise, but with processes")," was written in Python.\nThere is a very good reason for this and has to do with how threads are synchronized by default in Python.\nYou can find out what this is about ",(0,r.kt)("a",{parentName:"p",href:"#the-gil"},"in the Arena section"),", after you have completed the ",(0,r.kt)("a",{parentName:"p",href:"#synchronisation"},"Synchronisation section"),"."),(0,r.kt)("h3",{id:"threads-vs-processes"},"Threads vs Processes"),(0,r.kt)("p",null,"So why use the implementation that spawns more processes if it's slower than the one using threads?"),(0,r.kt)("h4",{id:"safety"},"Safety"),(0,r.kt)("p",null,"Compile and run the two programs in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array-bugs/seg-fault/"),", first with 2 processes and threads and then with 4.\nThey do the same thing as before: compute the sum the elements in an array, but with a twist: each of them contains a bug causing a seg fault.\nNotice that ",(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_threads"),' doesn\'t print anything with 4 threads, but merely a "Segmentation fault" message.\nOn the other hand, ',(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_processes")," prints a sum and a running time, albeit different from the sums we've seen so far."),(0,r.kt)("p",null,"The reason is that signals such as ",(0,r.kt)("inlineCode",{parentName:"p"},"SIGSEGV"),", which is used when a segmentation fault happens affect the entire process that handles them.\nTherefore, when we split our workload between several threads and one of them causes an error such as a seg fault, that error is going to terminate the entire process.\nThe same thing happens when we use processes instead of threads: one process causes an error, which gets it killed, but the other processes continue their work unhindered.\nThis is why we end up with a lower sum in the end: because one process died too early and didn't manage to write the partial sum it had computed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"results")," array."),(0,r.kt)("h4",{id:"practice-wait-for-it"},"Practice: Wait for It!"),(0,r.kt)("p",null,"The process that spawns all the others and subsequently calls ",(0,r.kt)("inlineCode",{parentName:"p"},"waitpid")," to wait for them to finish can also get their return codes.\nUpdate the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array-bugs/seg-fault/sum_array_processes.d")," and modify the call to ",(0,r.kt)("inlineCode",{parentName:"p"},"waitpid")," to obtain and investigate this return code.\nDisplay an appropriate message if one of the child processes returns an error."),(0,r.kt)("p",null,"Remember to use the appropriate ",(0,r.kt)("a",{parentName:"p",href:"https://linux.die.net/man/2/waitpid"},"macros")," for handling the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," variable that is modified by ",(0,r.kt)("inlineCode",{parentName:"p"},"waitpid"),", as it is a bitfield.\nWhen a process runs into a system error, it receives a signal.\nA signal is a means to interrupt the normal execution of a program from the outside.\nIt is associated with a number.\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"kill -l")," to find the full list of signals. "),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/seg-fault-exit-code"},"Quiz")),(0,r.kt)("p",null,"So up to this point we've seen that one advantage of processes is that they offer better safety than threads.\nBecause they use separate virtual address spaces, sibling processes are better isolated than threads.\nThus, an application that uses processes can be more robust to errors than if it were using threads."),(0,r.kt)("h4",{id:"memory-corruption"},"Memory Corruption"),(0,r.kt)("p",null,"Because they share the same address space,  threads run the risk of corrupting each other's data.\nTake a look at the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array-bugs/memory-corruption/python/"),".\nThe two programs only differ in how they spread their workload.\nOne uses threads while the other uses processes."),(0,r.kt)("p",null,"Run both programs with and without memory corruption.\nPass any value as a third argument to trigger the corruption."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../sum-array-bugs/memory-corruption/python$ python3 memory_corruption_processes.py <number_of_processes>  # no memory corruption\n[...]\n\nstudent@os:~/.../sum-array-bugs/memory-corruption/python$ python3 memory_corruption_processes.py <number_of_processes> 1  # do memory corruption\n[...]\n")),(0,r.kt)("p",null,"The one using threads will most likely print a negative sum, while the other displays the correct sum.\nThis happens because all threads refer the same memory for the array ",(0,r.kt)("inlineCode",{parentName:"p"},"arr"),".\nWhat happens to the processes is a bit more complicated."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#copy-on-write"},"Later in this lab")," we will see that initially, the page tables of all processes point to the same physical frames or ",(0,r.kt)("inlineCode",{parentName:"p"},"arr"),".\nWhen the malicious process tries to corrupt this array by ",(0,r.kt)("strong",{parentName:"p"},"writing data to it"),", the OS duplicates the original frames of ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," so that the malicious process writes the corrupted values to these new frames, while leaving the original ones untouched.\nThis mechanism is called ",(0,r.kt)("strong",{parentName:"p"},"Copy-on-Write")," and is an OS optimisation so that memory is shared between the parent and the child process, until one of them attempts to write to it.\nAt this point, this process receives its own separate copies of the previously shared frames."),(0,r.kt)("p",null,"Note that in order for the processes to share the ",(0,r.kt)("inlineCode",{parentName:"p"},"sums")," dictionary, it is not created as a regular dictionary, but using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Manager")," module.\nThis module provides some special data structures that are allocated in ",(0,r.kt)("strong",{parentName:"p"},"shared memory")," so that all processes can access them.\nYou can learn more about shared memory and its various implementations ",(0,r.kt)("a",{parentName:"p",href:"#shared-memory"},"in the Arena section"),"."),(0,r.kt)("h2",{id:"usage-of-processes-and-threads-in-apache2"},"Usage of Processes and Threads in ",(0,r.kt)("inlineCode",{parentName:"h2"},"apache2")),(0,r.kt)("p",null,"We'll take a look at how a real-world application - the ",(0,r.kt)("inlineCode",{parentName:"p"},"apache2")," HTTP server - makes use of processes and threads.\nSince the server must be able to handle multiple clients at the same time, it must therefore use some form of concurrency.\nWhen a new client arrives, the server offloads the work of interacting with that client to another process or thread."),(0,r.kt)("p",null,"The choice of whether to use multiple processes or threads is not baked into the code.\nInstead, ",(0,r.kt)("inlineCode",{parentName:"p"},"apache2")," provides a couple of modules called MPMs (Multi-Processing Modules).\nEach module implements a different concurrency model and the users can pick whatever module best fits their needs by editing the server configuration files."),(0,r.kt)("p",null,"The most common MPMs are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prefork"),": there are multiple worker processes, each process is single-threaded and handles one client request at a time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"worker"),": there are multiple worker processes, each process is multi-threaded, and each thread handles one client request at a time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event"),": same as ",(0,r.kt)("inlineCode",{parentName:"li"},"worker")," but designed to better handle some particular use cases")),(0,r.kt)("p",null,"In principle, ",(0,r.kt)("inlineCode",{parentName:"p"},"prefork")," provides more stability and backwards compatibility, but it has a bigger overhead.\nOn the other hand, ",(0,r.kt)("inlineCode",{parentName:"p"},"worker")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," are more scalable, and thus able to handle more simultaneous connections, due to the usage of threads.\nOn modern systems ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," is almost always the default."),(0,r.kt)("h3",{id:"apache2-live-action"},(0,r.kt)("inlineCode",{parentName:"h3"},"apache2")," Live Action"),(0,r.kt)("p",null,"Let's run an actual instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"apache2")," and see how everything works.\nGo to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/apache2")," and run ",(0,r.kt)("inlineCode",{parentName:"p"},"make run"),".\nThis will start a container with ",(0,r.kt)("inlineCode",{parentName:"p"},"apache2")," running inside."),(0,r.kt)("p",null,"Check that the server runs as expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~$ curl localhost:8080\n<html><body><h1>It works!</h1></body></html>\n")),(0,r.kt)("p",null,"Now go inside the container and take a look at running processes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../lab/support/apache2$ docker exec -it apache2-test bash\n\nroot@56b9a761d598:/usr/local/apache2# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 20:38 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1  0 20:38 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      10       1  0 20:38 pts/0    00:00:00 httpd -DFOREGROUND\nroot          25       0  0 20:40 pts/1    00:00:00 bash\nroot          31      25  0 20:40 pts/1    00:00:00 ps -ef\n")),(0,r.kt)("p",null,"We see 3 ",(0,r.kt)("inlineCode",{parentName:"p"},"httpd")," processes.\nThe first one, running as root, is the main process, while the other 2 are the workers."),(0,r.kt)("p",null,"Let's confirm that we are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," mpm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"root@56b9a761d598:/usr/local/apache2# grep mod_mpm conf/httpd.conf\nLoadModule mpm_event_module modules/mod_mpm_event.so\n#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n#LoadModule mpm_worker_module modules/mod_mpm_worker.so\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," mpm is enabled, so we expect each worker to be multi-threaded.\nLet's check:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"root@56b9a761d598:/usr/local/apache2# ps -efL\nUID          PID    PPID     LWP  C NLWP STIME TTY          TIME CMD\nroot           1       0       1  0    1 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1       8  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      11  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      12  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      16  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      17  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      18  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      19  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1       9  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      14  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      15  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      20  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      21  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      22  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      23  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nroot          24       0      24  1    1 20:56 pts/1    00:00:00 bash\nroot          30      24      30  0    1 20:56 pts/1    00:00:00 ps -efL\n")),(0,r.kt)("p",null,"Indeed, each worker has 7 threads.\nIn fact, the number of threads per worker is configurable, as well as the number of initial workers."),(0,r.kt)("p",null,"When a new connection is created, it will be handled by whatever thread is available from any worker.\nIf all the threads are busy, then the server will spawn more worker processes (and therefore more threads), as long as the total number of threads is below some threshold, which is also configurable."),(0,r.kt)("p",null,"Let's see this dynamic scaling in action.\nWe need to create a number of simultaneous connections that is larger than the current number of threads.\nThere is a simple script in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/apache2/make_conn.py")," to do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../lab/support/apache2$ python3 make_conn.py localhost 8080\nPress ENTER to exit\n")),(0,r.kt)("p",null,"The script has created 100 connections and will keep them open until we press Enter."),(0,r.kt)("p",null,"Now, in another terminal, let's check the situation inside the container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../lab/support/apache2$ docker exec -it apache2-test bash\n\nroot@56b9a761d598:/usr/local/apache2# ps -efL\nUID          PID    PPID     LWP  C NLWP STIME TTY          TIME CMD\nroot           1       0       1  0    1 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      40  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      45  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      46  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      51  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      52  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      53  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      54  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      55  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      58  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      60  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      62  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      63  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      65  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      66  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\n[...]\nwww-data     109       1     109  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     115  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     116  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     121  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     122  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     123  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     124  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nroot         146       0     146  0    1 21:10 pts/1    00:00:00 bash\nroot         152     146     152  0    1 21:10 pts/1    00:00:00 ps -efL\n")),(0,r.kt)("p",null,"We see a much larger number of threads, as expected."),(0,r.kt)("h3",{id:"practice-investigate-apache2-using-strace"},"Practice: Investigate ",(0,r.kt)("inlineCode",{parentName:"h3"},"apache2")," Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"strace")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"strace")," to discover the server document root.\nThe document root is the path in the filesystem from where httpd serves all the files requested by the clients."),(0,r.kt)("p",null,"First you will have to stop the running container using ",(0,r.kt)("inlineCode",{parentName:"p"},"make stop"),", then restart it with ",(0,r.kt)("inlineCode",{parentName:"p"},"make run-privileged"),"."),(0,r.kt)("p",null,"Then you will use ",(0,r.kt)("inlineCode",{parentName:"p"},"strace")," inside the container to attach to the worker processes (use the ",(0,r.kt)("inlineCode",{parentName:"p"},"-p")," option for this).\nYou will also have to use ",(0,r.kt)("inlineCode",{parentName:"p"},"-f")," flag with ",(0,r.kt)("inlineCode",{parentName:"p"},"strace"),", so that it will follow all the threads inside the processes."),(0,r.kt)("p",null,"After you have attached successfully to all worker processes, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," command to send a request, like the one in the beginning of this section."),(0,r.kt)("p",null,"Then check the ",(0,r.kt)("inlineCode",{parentName:"p"},"strace")," output to see what files were opened by the server."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/apache2-strace"},"Quiz")),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,'So far, you\'ve probably seen that spawning a process can "use" a different program (hence the path in the args of ',(0,r.kt)("inlineCode",{parentName:"p"},"system")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Popen"),"), but some languages such as Python allow you to spawn a process that executes a function from the same script.\nA thread, however, can only start from a certain entry point ",(0,r.kt)("strong",{parentName:"p"},"within the current address space"),", as it is bound to the same process.\nConcretely, a process is but a group of threads.\nFor this reason, when we talk about scheduling or synchronisation, we talk about threads.\nA thread is, thus, an abstraction of a task running on a CPU core.\nA process is a logical group of such tasks."),(0,r.kt)("p",null,"We can sum up what we've learned so far by saying that processes are better used for separate, independent work, such as the different connections handled by a server.\nConversely, threads are better suited for replicated work: when the same task has to be performed on multiple cores.\nHowever, replicated work can also be suited for processes.\nDistributed applications, however, leverage different processes as this allows them to run on multiple physical machines at once.\nThis is required by the very large workloads such applications are commonly required to process."),(0,r.kt)("p",null,"These rules are not set in stone, though.\nLike we saw in the ",(0,r.kt)("inlineCode",{parentName:"p"},"apache2")," example, the server uses multiple threads as well as multiple processes.\nThis provides a degree of stability - if one worker thread crashes, it will only crash the other threads belonging to the same process - while still taking advantage of the light resource usage inherent to threads."),(0,r.kt)("p",null,"This kind of trade-offs are a normal part in the development of real-world applications."),(0,r.kt)("h2",{id:"copy-on-write"},"Copy-on-Write"),(0,r.kt)("p",null,'So far you know that the parent and child process have separate virtual address spaces.\nBut how are they created, namely how are they "separated"?\nAnd what about the ',(0,r.kt)("strong",{parentName:"p"},"physical address space"),"?\nOf course we would like the stack of the parent, for example, to be physically distinct from that of the child so they can execute different functions and use different local variables."),(0,r.kt)("p",null,"But should ",(0,r.kt)("strong",{parentName:"p"},"all")," the PAS of the parent be distinct from that of the child?\nWhat about some read-only memory sections, such as ",(0,r.kt)("inlineCode",{parentName:"p"},".text")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".rodata"),"?\nAnd what about the heap, where the child ",(0,r.kt)("em",{parentName:"p"},"may")," use some data previously written by the parent and then override it with its own data."),(0,r.kt)("p",null,"The answer to all of these questions is a core mechanism of multi-process operating systems called ",(0,r.kt)("strong",{parentName:"p"},"Copy-on-Write"),".\nIt works according to one very simple principle:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The VAS of the child process initially points to the same PAS as that of the parent.\nA (physical) frame is only duplicated by the child when it attempts to ",(0,r.kt)("strong",{parentName:"p"},"write")," data to it.")),(0,r.kt)("p",null,"This ensures that read-only sections remain shared, while writable sections are shared as long as their contents remain unchanged.\nWhen changes happen, the process making the change receives a unique frame as a modified copy of the original frame ",(0,r.kt)("em",{parentName:"p"},"on demand"),"."),(0,r.kt)("p",null,"In the image below we have the state of the child and parent processes right after ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," returns in both of them.\nSee how each has its own VAS, both of them being mapped to (mostly) the same PAS."),(0,r.kt)("p",null,"When one process writes data to a writeable page (in our case, the child writes to a heap page), the frame to which it corresponds is first duplicated.\nThen the process' page table points the page to the newly copied frame, as you can see in the image below."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Be careful!"),"\nDo not confuse copy-on-write with demand paging.\nRemember from the ",(0,r.kt)("a",{parentName:"p",href:"../../data/"},"Data chapter")," that demand paging means that when you allocate memory the OS allocates virtual memory that remains unmapped to physical memory until it's used.\nOn the other hand, copy-on-write posits that the virtual memory is already mapped to some frames.\nThese frames are only duplicated when one of the processes attempts to write data to them."),(0,r.kt)("h4",{id:"practice"},"Practice"),(0,r.kt)("p",null,"Now let's see the copy-on-write mechanism in practice.\nKeep in mind that ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," is a function used to create a process."),(0,r.kt)("p",null,"Open two terminals (or better: use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tmux/tmux/wiki"},(0,r.kt)("inlineCode",{parentName:"a"},"tmux")),").\nIn one of them compile and run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/fork-faults/fork_faults.c"),".\nAfter each time you press ",(0,r.kt)("inlineCode",{parentName:"p"},"Enter")," in the first terminal window, run the following command in the second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../lab/support/fork-faults$ ps -o min_flt,maj_flt $(pidof fork_faults)\n")),(0,r.kt)("p",null,"It will show you the number of minor and major page faults performed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"fork_faults")," process and its child."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/parent-faults-before-fork"},"Quiz 1")),(0,r.kt)("p",null,"Note that after ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()"),"-ing, there is a second row in the output of ",(0,r.kt)("inlineCode",{parentName:"p"},"ps"),".\nThat corresponds to the child process.\nThe first one still corresponds to the parent."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/child-faults-after-write"},"Quiz 2")),(0,r.kt)("p",null,"Now it should be clear how demand paging differs from copy-on-write.\nShared memory is a similar concept.\nIt's a way of marking certain allocated pages so that copy-on-write is disabled.\nAs you may imagine, changes made by the parent to this memory are visible to the child and vice-versa.\nYou can learn more about it ",(0,r.kt)("a",{parentName:"p",href:"#shared-memory"},"its dedicated section in the Arena"),"."),(0,r.kt)("h2",{id:"synchronisation"},"Synchronisation"),(0,r.kt)("p",null,'So far we\'ve used threads and processes without wondering how to "tell" them how to access shared data.\nMoreover, in order to make threads wait for each other, we simply had the main thread wait for the others to finish all their work.\nBut what if we want one thread to wait until another one simply performs some specific action after which it resumes its execution?\nFor this, we need to use some more complex synchronisation mechanisms.'),(0,r.kt)("h3",{id:"race-conditions"},"Race Conditions"),(0,r.kt)("p",null,"For example, what if one thread wants to increase a global variable while another one wants to decrease it?\nLet's say the assembly code for increasing and decreasing the variable looks like the one in the snippet below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asm"},"increase:\n    mov eax, [var]\n    inc eax\n    mov [var], eax\n\ndecrease:\n    mov eax, [var]\n    dec eax\n    mov [var], eax\n")),(0,r.kt)("p",null,"Imagine both threads executed ",(0,r.kt)("inlineCode",{parentName:"p"},"mov eax, [var]")," at the same time.\nThen each would independently increase its (",(0,r.kt)("strong",{parentName:"p"},"non-shared"),") ",(0,r.kt)("inlineCode",{parentName:"p"},"eax")," register.\nIn the end, the final value of ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," depends on which thread executes ",(0,r.kt)("inlineCode",{parentName:"p"},"mov [var], eax")," ",(0,r.kt)("em",{parentName:"p"},"last"),'.\nSo it\'s kind of a reversed race.\nThe thread that runs the slowest "wins" this race and writes the final value of ',(0,r.kt)("inlineCode",{parentName:"p"},"var"),".\nBut this is up to the scheduler and is non-deterministic.\nSuch undefined behaviours can cripple the execution of a program if ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," is some critical variable."),(0,r.kt)("p",null,"Let's see this bug in action.\nGo to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition.d"),", compile and run the code a few times.\nIt spawns to threads that do exactly what we've talked about so far: one thread increments ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," 10 million times, while the other decrements it 10 million times."),(0,r.kt)("p",null,"As you can see from running the program, the differences between subsequent runs can be substantial.\nTo fix this, we must ensure that ",(0,r.kt)("strong",{parentName:"p"},"only one thread")," can execute either ",(0,r.kt)("inlineCode",{parentName:"p"},"var++")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"var--")," at any time.\nWe call these code sections ",(0,r.kt)("strong",{parentName:"p"},"critical sections"),".\nA critical section is a piece of code that can only be executed by ",(0,r.kt)("strong",{parentName:"p"},"one thread")," at a time.\nSo we need some sort of ",(0,r.kt)("em",{parentName:"p"},"mutual exclusion mechanism")," so that when one thread runs the critical section, the other has to ",(0,r.kt)("strong",{parentName:"p"},"wait")," before entering it.\nThis mechanism is called a ",(0,r.kt)("strong",{parentName:"p"},"mutex"),', whose name comes from "mutual exclusion".'),(0,r.kt)("p",null,"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition_mutex.d")," and notice the differences between this code and the buggy one.\nWe now use a ",(0,r.kt)("inlineCode",{parentName:"p"},"Mutex")," variable which we ",(0,r.kt)("inlineCode",{parentName:"p"},"lock()")," at the beginning of a critical section and we ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock()")," at the end.\nGenerally speaking ",(0,r.kt)("inlineCode",{parentName:"p"},"lock()"),"-ing a mutex makes a thread enter a critical section, while calling ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock()")," makes the thread leave said critical section.\nTherefore, as we said previously, the critical sections in our code are ",(0,r.kt)("inlineCode",{parentName:"p"},"var--")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"var++"),".\nRun the code multiple times to convince yourself that in the end, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," will always be 0."),(0,r.kt)("p",null,"Mutexes contain an internal variable which can be either 1 (locked) or 0 (unlocked).\nWhen a thread calls ",(0,r.kt)("inlineCode",{parentName:"p"},"lock()"),", it attempts to set that variable to 1.\nIf it was 0, the thread sets it to 1 and proceeds to execute the critical section.\nOtherwise, it ",(0,r.kt)("strong",{parentName:"p"},"suspends its execution")," and waits until that variable is set to 0 again."),(0,r.kt)("p",null,"When calling ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock()"),", the internal variable is set to 0 and all waiting threads are woken up to try to acquire the mutex again.\n",(0,r.kt)("strong",{parentName:"p"},"Be careful:")," It is generally considered unsafe and ",(0,r.kt)("a",{parentName:"p",href:"https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_lock.html"},"in many cases undefined behaviour")," to call ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock()")," from a different thread than the one that acquired the lock.\nSo the general workflow should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"within a single thread:\n    mutex.lock()\n    // do atomic stuff\n    mutex.unlock()\n")),(0,r.kt)("h4",{id:"synchronisation---overhead"},"Synchronisation - Overhead"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"There ain't no such thing as a free lunch")),(0,r.kt)("p",null,"This saying is also true for multithreading.\nRunning threads in parallel is nice and efficient, but synchronisation always comes with a penalty: overhead.\nUse the ",(0,r.kt)("inlineCode",{parentName:"p"},"time")," command to record the running times of ",(0,r.kt)("inlineCode",{parentName:"p"},"race_condition")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"race_condition_mutex"),".\nNotice that those of ",(0,r.kt)("inlineCode",{parentName:"p"},"race_condition_mutex")," are larger than those of ",(0,r.kt)("inlineCode",{parentName:"p"},"race_condition"),"."),(0,r.kt)("p",null,"The cause of this is that now when one thread is executing the critical section, the other has to wait and do nothing.\nWaiting means changing its state from RUNNING to WAITING, which brings further overhead from the scheduler.\nThis latter overhead comes from the ",(0,r.kt)("strong",{parentName:"p"},"context switch"),"s that is necessary for a thread to switch its state from RUNNING to WAITING and back."),(0,r.kt)("h4",{id:"practice-wrap-the-whole-for-statements-in-critical-sections"},"Practice: Wrap the Whole ",(0,r.kt)("inlineCode",{parentName:"h4"},"for")," Statements in Critical Sections"),(0,r.kt)("p",null,"Move the calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"lock()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock()")," outside the ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," statements so that the critical sections become the entire statement.\nMeasure the time spent now by the code and compare it with the times recorded when the critical sections were made up of only ",(0,r.kt)("inlineCode",{parentName:"p"},"var--")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"var++"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/coarse-vs-granular-critical-section"},"Quiz")),(0,r.kt)("h3",{id:"atomics"},"Atomics"),(0,r.kt)("p",null,"So now we know how to use mutexes.\nAnd we know that mutexes work by using an internal variable that can be either 1 (locked) or 0 (unlocked).\nBut how does ",(0,r.kt)("inlineCode",{parentName:"p"},"lock()")," actually set that variable to 1?\nHow does it avoid a race condition in case another thread also wants to set it to 1?"),(0,r.kt)("p",null,'We need a guarantee that anyone "touching" that variable does so "within its own critical section".\nBut now we need a critical section to implement a critical section...\nTo solve this circular problem, we make use of a very common ',(0,r.kt)("em",{parentName:"p"},"Deus ex Machina"),": ",(0,r.kt)("strong",{parentName:"p"},"hardware support"),"."),(0,r.kt)("p",null,"Modern processors are capable of ",(0,r.kt)("em",{parentName:"p"},"atomically")," accessing data, either for reads or writes.\nAn atomic action is and indivisible sequence of operations that a thread runs without interference from others.\nConcretely, before initiating an atomic transfer on one of its data buses, the CPU first makes sure all other transfers have ended, then ",(0,r.kt)("strong",{parentName:"p"},"locks")," the data bus by stalling all cores attempting to transfer data on it.\nThis way, one thread obtains ",(0,r.kt)("strong",{parentName:"p"},"exclusive")," access to the data bus while accessing data.\nAs a side note, the critical sections in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/race_condition_mutex.d")," are also atomic once they are wrapped between calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"lock()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"unlock()"),". "),(0,r.kt)("p",null,"As with every hardware feature, the x86 ISA exposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"lock")," instruction, which makes a given instruction run atomically.\nYou can play with it ",(0,r.kt)("a",{parentName:"p",href:"#atomic-assembly"},"in the Arena"),"."),(0,r.kt)("p",null,"Compilers provide support for such hardware-level atomic operations.\nGCC exposes ",(0,r.kt)("a",{parentName:"p",href:"https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html"},"builtins")," such as ",(0,r.kt)("inlineCode",{parentName:"p"},"__atomic_load()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"__atomic_store()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"__atomic_compare_exchange()")," and many others.\nAll of them rely on the mechanism described above."),(0,r.kt)("p",null,"In D, this functionality is implemented in the ",(0,r.kt)("inlineCode",{parentName:"p"},"core.atomic")," module.\nGo to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition_atomic.d")," and complete the function ",(0,r.kt)("inlineCode",{parentName:"p"},"decrementVar()"),".\nCompile and run the code.\nNow measure its running time against the mutex implementations.\nIt should be somewhere between ",(0,r.kt)("inlineCode",{parentName:"p"},"race_condition.d")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"race_condition_mutex.d"),"."),(0,r.kt)("p",null,"So using the hardware support is more efficient, but it can only be leveraged for simple, individual instructions, such as loads and stores."),(0,r.kt)("h3",{id:"semaphores"},"Semaphores"),(0,r.kt)("p",null,"Up to know we've learned how to create critical sections that can be accessed by ",(0,r.kt)("strong",{parentName:"p"},"only one thread")," at a time.\nThese critical sections revolved around ",(0,r.kt)("strong",{parentName:"p"},"data"),".\nWhenever we define a critical section, there is some specific data to which we cannot allow parallel access.\nThe reason why we can't allow it is, in general, data integrity, as we've seen in our examples in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/")),(0,r.kt)("p",null,"But what if threads need to count?\nCounting is inherently thread-unsafe because it's a ",(0,r.kt)("em",{parentName:"p"},"read-modify-write")," operation.\nWe read the counter, increment (modify) it and then write it back.\nThink about our example with ",(0,r.kt)("a",{parentName:"p",href:"#usage-of-processes-and-threads-in-apache2"},(0,r.kt)("inlineCode",{parentName:"a"},"apache2")),"\nLet's say a ",(0,r.kt)("inlineCode",{parentName:"p"},"worker")," has created a ",(0,r.kt)("em",{parentName:"p"},"pool")," of 3 threads.\nThey are not doing any work initially;\nthey are in the WAITING state.\nAs clients initiate connections, these threads are picked up and are used to serve ",(0,r.kt)("strong",{parentName:"p"},"at most 3")," connections at a time.\nBut the number of connections may be arbitrarily large.\nTherefore, we need a way to keep track of it.\nWhen serving a client, a thread should decrement it to inform the others that a connection has been finished.\nIn short, we need a counter that the dispatcher increments and that worker threads decrement."),(0,r.kt)("p",null,"Such a counter could be implemented using a ",(0,r.kt)("strong",{parentName:"p"},"semaphore"),".\nFor simplicity's sake, you can view a semaphore as simply a mutex whose internal variable can take any value and acts like a counter.\nWhen a thread attempts to ",(0,r.kt)("inlineCode",{parentName:"p"},"acquire()")," a semaphore, it will wait if this counter is less than or equal to 0.\nOtherwise, the thread ",(0,r.kt)("strong",{parentName:"p"},"decrements")," the internal counter and the function returns.\nThe opposite of ",(0,r.kt)("inlineCode",{parentName:"p"},"acquire()")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"release()"),", which increases the internal counter by a given value (by default 1)."),(0,r.kt)("h4",{id:"practice-apache2-simulator---semaphore"},"Practice: ",(0,r.kt)("inlineCode",{parentName:"h4"},"apache2")," Simulator - Semaphore"),(0,r.kt)("p",null,"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/apache2-simulator/apache2_simulator_semaphore.py"),".\nIn the ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," function we create a semaphore which we increment (",(0,r.kt)("inlineCode",{parentName:"p"},"release()"),") upon every new message.\nEach thread decrements (",(0,r.kt)("inlineCode",{parentName:"p"},"acquire()"),") this semaphore to signal that it wants to retrieve a message from the list.\nThe retrieval means modifying a data structure, which is a critical section, so we use a ",(0,r.kt)("strong",{parentName:"p"},"separate")," mutex for this.\nOtherwise, multiple threads could acquire the semaphore at the same time and try to modify the list at the same time.\nNot good."),(0,r.kt)("p",null,"Locking this mutex (which in Python is called ",(0,r.kt)("inlineCode",{parentName:"p"},"Lock"),") is done with the following statement: ",(0,r.kt)("inlineCode",{parentName:"p"},"with msg_mutex:"),"\nThis is a syntactic equivalent to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},"event.acquire()\nmessages.append(msg)\nevent.release()\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/semaphore-equivalent"},"Quiz")),(0,r.kt)("p",null,"Since the length of the ",(0,r.kt)("inlineCode",{parentName:"p"},"messages")," list is simply ",(0,r.kt)("inlineCode",{parentName:"p"},"len(messages)"),", it may seem a bit redundant to use a semaphore to store essentially the same value.\nIn the next section, we'll look at a more refined mechanism for our use case: ",(0,r.kt)("em",{parentName:"p"},"condition variables"),"."),(0,r.kt)("h3",{id:"conditions"},"Conditions"),(0,r.kt)("p",null,"Another way we can implement our ",(0,r.kt)("inlineCode",{parentName:"p"},"apache2")," simulator is to use a condition variable.\nThis one is probably the most intuitive synchronisation primitive.\nIt's a means by which a thread can tell another one: \"Hey, wake up, ",(0,r.kt)("em",{parentName:"p"},"this")," happened!\".\nSo it's a way for threads to notify each other.\nFor this reason, the main methods associated with conditions are ",(0,r.kt)("inlineCode",{parentName:"p"},"notify()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wait()"),".\nAs you might expect, they are complementary:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wait()")," puts the thread in the WAITING state until it's woken up by another one"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"notify()")," wakes up one or more ",(0,r.kt)("inlineCode",{parentName:"li"},"wait()"),"-ing threads.\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"notify()")," is called before any thread has called ",(0,r.kt)("inlineCode",{parentName:"li"},"wait()"),", the first thread that calls it will continue its execution unhindered.")),(0,r.kt)("h4",{id:"practice-apache2-simulator---condition"},"Practice: ",(0,r.kt)("inlineCode",{parentName:"h4"},"apache2")," Simulator - Condition"),(0,r.kt)("p",null,"But this is not all, unfortunately.\nLook at the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/apache2-simulator/apache2_simulator_condition.py"),".\nSee the main thread call notify once it reads the message.\nNotice that this call is within a ",(0,r.kt)("inlineCode",{parentName:"p"},"with event:")," so it acquires some mutex / semaphore."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acquire()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"release()")," are commonly associated with mutexes or semaphores.\nWhat do they have to do with condition variables?"),(0,r.kt)("p",null,"Well, a lock ",(0,r.kt)("inlineCode",{parentName:"p"},"Condition")," variable also stores an inner lock (mutex).\nIt is this lock that we ",(0,r.kt)("inlineCode",{parentName:"p"},"acquire()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"release()"),".\nIn fact, the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#condition-objects"},"documentation")," states we should only call ",(0,r.kt)("inlineCode",{parentName:"p"},"Condition")," methods with its inner lock taken."),(0,r.kt)("p",null,"Why is this necessary?\nTake a look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"worker()")," function.\nAfter ",(0,r.kt)("inlineCode",{parentName:"p"},"wait()"),"-ing (we'll explain the need for the loop in a bit), it extracts a message from the message queue.\nThis operation is ",(0,r.kt)("strong",{parentName:"p"},"not")," atomic, so it must be enclosed within a critical section.\nHence, the lock."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/notify-only-with-mutex"},"Quiz")),(0,r.kt)("p",null,"So now we know we cannot only use a mutex.\nThe mutex is used to access and modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"messages")," list atomically.\nNow you might be thinking that this code causes a deadlock:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},"with event:\n    while len(messages) == 0:\n        event.wait()\n")),(0,r.kt)("p",null,"The thread gets the lock and then, if there are no messages, it switches its state to WAITING.\nA classic deadlock, right?\nNo.\n",(0,r.kt)("inlineCode",{parentName:"p"},"wait()")," also releases the inner lock of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Condition")," and being woken up reacquires it.\nNeat!\nAnd the ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop that checks if there are any new messages is necessary because ",(0,r.kt)("inlineCode",{parentName:"p"},"wait()")," can return after an arbitrary long time.\nTherefore, it's necessary to check for messages again when waking up."),(0,r.kt)("p",null,"So now we have both synchronisation ",(0,r.kt)("strong",{parentName:"p"},"and")," signalling.\nThis is what conditions are for, ultimately."),(0,r.kt)("p",null,"Now that you understand the concept of synchronisation, you should apply it in a broader context.\n",(0,r.kt)("a",{parentName:"p",href:"#synchronisation---thread-safe-data-structure"},"In the Arena"),", you'll find an exercise asking you to make an existing arraylist implementation thread-safe.\nHave fun!"),(0,r.kt)("h2",{id:"thread-local-storage-tls"},"Thread-Local Storage (TLS)"),(0,r.kt)("p",null,"First things first: what if we don't want data to be shared between threads?\nAre we condemned to have to worry about race conditions?\nWell, no."),(0,r.kt)("p",null,'To protect data from race conditions "by design", we can place in what\'s called ',(0,r.kt)("strong",{parentName:"p"},"Thread-Local Storage (TLS)"),'.\nAs its name implies, this is a type of storage that is "owned" by individual threads, as opposed to being shared among all threads.\n',(0,r.kt)("strong",{parentName:"p"},"Do not confuse it with copy-on-write"),".\nTLS pages are always duplicated when creating a new thread and their contents are re-initialised."),(0,r.kt)("h4",{id:"practice-d---tls-by-default"},"Practice: D - TLS by Default"),(0,r.kt)("p",null,"Take a look again at ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition.d"),", specifically at how ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," is declared:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},"__gshared int var;\n")),(0,r.kt)("p",null,"Have you wondered what the ",(0,r.kt)("inlineCode",{parentName:"p"},"__gshared")," keyword does?\nWell, for memory safety reasons, in D, all variables are by default ",(0,r.kt)("strong",{parentName:"p"},"not shared")," between threads.\nWe need to specifically ask the language to let us share a variable between threads.\nWe can do this using either the ",(0,r.kt)("inlineCode",{parentName:"p"},"__gshared")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"shared")," keywords.\nYou've seed ",(0,r.kt)("inlineCode",{parentName:"p"},"shared")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition_atomic.d"),"."),(0,r.kt)("p",null,"The difference between them is that ",(0,r.kt)("inlineCode",{parentName:"p"},"shared")," only allows programmers read-modify-write the variable atomically, as we do in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition_atomic.d"),".\nModify the ",(0,r.kt)("inlineCode",{parentName:"p"},"incrementVar()")," function and increment ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," like you would any variable: ",(0,r.kt)("inlineCode",{parentName:"p"},"var++"),".\nTry to compile the code.\nIt fails.\nThe compiler is smart and tells you what to do instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Error: read-modify-write operations are not allowed for `shared` variables\n        Use `core.atomic.atomicOp!"+="(var, 1)` instead\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"__gshared")," is a rawer version of ",(0,r.kt)("inlineCode",{parentName:"p"},"shared"),".\nIt doesn't forbid anything."),(0,r.kt)("h4",{id:"practice-c---tls-on-demand"},"Practice: C - TLS on Demand"),(0,r.kt)("p",null,"The perspective of C towards TLS is opposed to that of D: in C/C++ everything is shared by default.\nThis makes multithreading easier and more lightweight to implement than in D, because synchronisation is left entirely up to the developer, at the cost of potential unsafety."),(0,r.kt)("p",null,"Of course we can specify that some data belongs to the TLS, by preceding the declaration of a variable with ",(0,r.kt)("inlineCode",{parentName:"p"},"__thread")," keyword.\nFirst, compile and run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/c/race_condition_tls.c")," a few times.\nAs expected, the result is different each time."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Modify the declaration of ",(0,r.kt)("inlineCode",{parentName:"li"},"var")," and add the ",(0,r.kt)("inlineCode",{parentName:"li"},"__thread")," keyword to place the variable in the TLS of each thread.\nRecompile and run the code a few more times.\nYou should see that in the end, ",(0,r.kt)("inlineCode",{parentName:"li"},"var")," is 0.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/tls-synchronization"},"Quiz 1")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/tls-var-copies"},"Quiz 2")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Print the address and value of ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," in each thread.\nSee that they differ.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Modify the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," function before calling ",(0,r.kt)("inlineCode",{parentName:"p"},"pthread_create()"),".\nNotice that the value doesn't propagate to the other threads.\nThis is because, upon creating a new thread, its TLS is initialised. "))),(0,r.kt)("h2",{id:"scheduling"},"Scheduling"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/kissen/threads"},"https://github.com/kissen/threads")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.schaertl.me/posts/a-bare-bones-user-level-thread-library/"},"https://www.schaertl.me/posts/a-bare-bones-user-level-thread-library/"))),(0,r.kt)("p",null,"Up to now we know that the OS decides which ",(0,r.kt)("strong",{parentName:"p"},"thread")," (not process) runs on each CPU core at each time.\nNow we'll learn about the component that performs this task specifically: ",(0,r.kt)("strong",{parentName:"p"},"the scheduler"),"."),(0,r.kt)("p",null,"There are thousands of threads running at any time in a modern OS.\nThe job of the scheduler is to run and pause threads as well as allocate them to the CPU cores, with the following goals:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fairness"),": we do want all threads to get the same chance to run, i.e. run for about the same amount of time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"throughput"),": we want to run as many threads to completion so as to complete as many tasks as we can")),(0,r.kt)("p",null,"To do this, the scheduler must decide, at given times, to suspend a thread, save its current state and let another one run in its place.\nThis event is called a ",(0,r.kt)("strong",{parentName:"p"},"context switch"),".\nA context switch means changing the state of one thread (the replaced thread) from RUNNING to WAITING and the state of the replacement thread from READY / WAITING to RUNNING."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Quiz?")),(0,r.kt)("h3",{id:"user-level-vs-kernel-level-threads"},"User-Level vs Kernel-Level Threads"),(0,r.kt)("p",null,"There are two types of threads.\nThe threads you've used so far are ",(0,r.kt)("strong",{parentName:"p"},"kernel-level threads (KLT)"),".\nThey are created and scheduled in the kernel of the OS.\nOne of the most important of their features is that they offer true parallelism.\nWith KLTs, we can truly run a program on all the cores of our CPU at once.\nBut we must pay a price for this: scheduling them is very complex and context switches are costly (in terms of time), especially when switching threads belonging to different processes. "),(0,r.kt)("p",null,"By contrast, ",(0,r.kt)("strong",{parentName:"p"},"user-level threads (ULT)")," are managed by the user space.\nMore of the ULTs created by a program are generally mapped to the same kernel thread.\nIf a process only creates ULTs, then they will all be mapped to the single, main kernel thread of the process.\nSo if we cannot run code in parallel with ULTs, then why use them?\nWell, for I/O-intensive programs (those that do lots of network calls or file operations like reads and writes - web servers are a good example), threads are expected to perform lots of blocking calls, which causes context switches.\nIn such cases, user-level threads may be useful as context switches bring less overhead between user-level threads."),(0,r.kt)("h3",{id:"practice-user-level-threads-scheduler"},"Practice: User-Level Threads Scheduler"),(0,r.kt)("p",null,"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/scheduler"),".\nIt contains a minimalist ",(0,r.kt)("strong",{parentName:"p"},"user-level threads")," scheduler.\nCompiling it produces a shared library called ",(0,r.kt)("inlineCode",{parentName:"p"},"libult.so"),".\nYou can also consult its ",(0,r.kt)("a",{parentName:"p",href:"https://www.schaertl.me/posts/a-bare-bones-user-level-thread-library/"},"documentation"),".\nIt explains the API as well as its implementation.\nThe API exposed by the scheduling library is very simple.\nIt is only made up of 3 functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"threads_create()")," creates a new ULT"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"threads_exit()")," moves the current ULT to the COMPLETED state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"threads_join()")," waits for a given thread to end and saves its return value in the ",(0,r.kt)("inlineCode",{parentName:"li"},"result")," argument")),(0,r.kt)("p",null,"Look inside ",(0,r.kt)("inlineCode",{parentName:"p"},"support/libult/threads.c"),".\nHere you will find the 3 functions mentioned above."),(0,r.kt)("p",null,"The scheduler only uses 3 states: RUNNING, READY, COMPLETED."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/number-of-running-ults"},"Quiz")),(0,r.kt)("p",null,"The threads in the READY and COMPLETED states are kept in 2 separate queues.\nWhen the scheduler wants to run a new thread, it retrieves it from the READY queue.\nWhen a thread ends its execution, it is added to the COMPLETED queue, together with its return value."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/why-use-completed-queue"},"Quiz")),(0,r.kt)("h3",{id:"thread-control-block"},"Thread Control Block"),(0,r.kt)("p",null,"Let's dissect the ",(0,r.kt)("inlineCode",{parentName:"p"},"threads_create()")," function a bit.\nIt first initialises its queues and the timer for preemption.\nWe'll discuss preemption ",(0,r.kt)("a",{parentName:"p",href:"#preemption"},"in the next section"),".\nAfter performing initialisations, the function creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"TCB")," object.\nTCB stands for ",(0,r.kt)("strong",{parentName:"p"},"Thread Control Block"),"."),(0,r.kt)("p",null,"During the ",(0,r.kt)("a",{parentName:"p",href:"../lecture/"},"lecture"),", you saw that the kernel stores one instance of a ",(0,r.kt)("a",{parentName:"p",href:"https://elixir.bootlin.com/linux/v5.19.11/source/include/linux/sched.h#L726"},(0,r.kt)("inlineCode",{parentName:"a"},"task_struct"))," for each thread.\nRemember that its most important fields are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},"struct task_struct {\n    unsigned int                    __state;\n\n    void                           *stack;\n\n    unsigned int                    flags;\n\n    int                             on_cpu;\n    int                             prio;\n\n    /* Scheduler information */\n    struct sched_entity             se;\n    const struct sched_class        *sched_class;\n\n    /* The VAS: memory mappings */\n    struct mm_struct                *mm;\n\n    int                             exit_state;\n    int                             exit_code;\n\n    pid_t                           pid;\n\n    struct task_struct __rcu        *parent;\n\n    /* Child processes */\n    struct list_head                children;\n\n    /* Open file information */\n    struct files_struct             *files;\n};\n")),(0,r.kt)("p",null,"As you can see, this ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," stores ",(0,r.kt)("em",{parentName:"p"},"metadata")," regarding a given thread.\nThe same is true about the ",(0,r.kt)("inlineCode",{parentName:"p"},"TCB")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"libult.so"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct {\n    int id;\n    ucontext_t context;\n    bool has_dynamic_stack;\n    void *(*start_routine) (void *);\n    void *argument;\n    void *return_value;\n} TCB;\n")),(0,r.kt)("p",null,"It stores the thread ID (tid - ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"), similar to the PID of a process.\nIt stores a pointer to the function passed as argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"threads_create()")," (",(0,r.kt)("inlineCode",{parentName:"p"},"start_routine"),"), as well as the argument (",(0,r.kt)("inlineCode",{parentName:"p"},"argument"),") and the returned value (",(0,r.kt)("inlineCode",{parentName:"p"},"return_value"),") of said function."),(0,r.kt)("p",null,"In addition, the ",(0,r.kt)("inlineCode",{parentName:"p"},"TCB")," stores a ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),".\nFrom the ",(0,r.kt)("a",{parentName:"p",href:"https://pubs.opengroup.org/onlinepubs/7908799/xsh/ucontext.h.html"},"man page of the ",(0,r.kt)("inlineCode",{parentName:"a"},"ucontext.h")," header"),", we can see this type is a ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," that stores a pointer to the stack of the current thread (",(0,r.kt)("inlineCode",{parentName:"p"},"uc_stack"),").\nThis is similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"stack")," pointer in the ",(0,r.kt)("inlineCode",{parentName:"p"},"task_struct")," above.\nIn short, we can say a context defines an execution unit, such as a thread.\n",(0,r.kt)("strong",{parentName:"p"},"This is why changing the running thread is called a context switch.")),(0,r.kt)("p",null,"Let's compare this context with another thread implementation, from ",(0,r.kt)("a",{parentName:"p",href:"https://unikraft.org/"},"Unikraft"),".\nWe'll look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/unikraft/unikraft/blob/9bf6e63314a401204c02597834fb02f63a29aaf4/lib/uksched/include/uk/thread.h#L55-L76"},(0,r.kt)("inlineCode",{parentName:"a"},"uk_thread"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),", which is the TCB used in Unikraft:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct uk_thread {\n    const char *name;\n    void *stack;\n    void *tls;\n    void *ctx;\n    UK_TAILQ_ENTRY(struct uk_thread) thread_list;\n    uint32_t flags;\n    __snsec wakeup_time;\n    bool detached;\n    struct uk_waitq waiting_threads;\n    struct uk_sched *sched;\n    void (*entry)(void *);\n    void *arg;\n    void *prv;\n};\n")),(0,r.kt)("p",null,"There are some visible similarities between the two TCBs."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/tcb-libult-unikraft"},"Quiz")),(0,r.kt)("p",null,"Therefore, the workflow for creating and running a thread goes like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"main thread\n    |\n    `--\x3e threads_create()\n            |\n        |--\x3e tcb_new()\n            `--\x3e makecontext()\n                |\n            `--\x3e handle_thread_start() - called using the context\n                    |\n                |--\x3e start_routine() - the thread runs\n                            `--\x3e threads_exit()\n")),(0,r.kt)("p",null,"Compile and run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/libult/test_ult.c"),".\nIf you encounter the following error when running ",(0,r.kt)("inlineCode",{parentName:"p"},"test_ult"),", remember what you learned about the loader and using custom shared libraries in the ",(0,r.kt)("a",{parentName:"p",href:"../../software-stack/lab"},"Software Stack lab"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./test_ult: error while loading shared libraries: libult.so: cannot open shared object file: No such file or directory\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Hint: Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," variable.")),(0,r.kt)("p",null,"Notice that the threads run their code and alternatively, because their prints appear interleaved.\n",(0,r.kt)("a",{parentName:"p",href:"#preemption"},"In the next section"),", we'll see how this is done."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/ult-thread-ids"},"Quiz")),(0,r.kt)("h3",{id:"preemption"},"Preemption"),(0,r.kt)("p",null,"All schedulers can be split into two categoriesThere are two types of schedulers: ",(0,r.kt)("strong",{parentName:"p"},"preemptive")," and ",(0,r.kt)("strong",{parentName:"p"},"cooperative"),".\nWhen discussing this distinction, we need to first define the notion of ",(0,r.kt)("strong",{parentName:"p"},"yielding"),".\nYielding the CPU means that a thread suspends its own execution and enters the WAITING or READY state, either as a result of a blocking call (I/O operations or calling the scheduler's ",(0,r.kt)("inlineCode",{parentName:"p"},"yield()")," function directly).\nSo, yielding the CPU triggers a context switch whereby the current thread stops running and another one resumes or starts running in its place."),(0,r.kt)("h4",{id:"cooperative-scheduling"},"Cooperative Scheduling"),(0,r.kt)("p",null,"Cooperative scheduling relies on the fact that threads themselves would yield the CPU at some point.\nIf threads don't abide by this convention, they end up monopolising the CPU (since there is no one to suspend them) and end up starving the others.\nYou can get a feel of this behaviour by running the cooperative ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/unikraft/unikraft/blob/staging/lib/ukschedcoop/schedcoop.c"},"scheduler from Unikraft")," in the ",(0,r.kt)("a",{parentName:"p",href:"../../lecture/demo/cooperative-scheduling"},"lecture demos"),"."),(0,r.kt)("p",null,'This type of schedulers have the advantage of being lightweight, thus resulting in less overhead caused by context switches.\nHowever, as we\'ve already stated, they rely on the "good will" of threads to yield the CPU at some point.'),(0,r.kt)("h4",{id:"preemptive-scheduling"},"Preemptive Scheduling"),(0,r.kt)("p",null,"Preemptive scheduling solve the issue stated above by leaving the task of suspending the currently RUNNING thread and replacing it with another one from the READY queue up to the scheduler.\nThis increases its complexity and the duration of context switches, but threads now are not required to worry about yielding themselves and can focus on running their code and performing the task for which they are created."),(0,r.kt)("p",null,"Preemptive schedulers assign only allow threads to run for a maximum amount of time, called ",(0,r.kt)("strong",{parentName:"p"},"time slice")," (usually a few milliseconds).\nThey use timers which fire when a new time slice passes.\nThe firing of one such timer causes a context switch whereby the currently RUNNING thread is ",(0,r.kt)("em",{parentName:"p"},"preempted")," (i.e. suspended) and replaced with another one."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/type-of-scheduler-in-libult"},"Quiz")),(0,r.kt)("p",null,"Look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"init_profiling_timer()")," function.\nIt creates a timer that generates a ",(0,r.kt)("inlineCode",{parentName:"p"},"SIGPROF")," signal and then defines a handler (the ",(0,r.kt)("inlineCode",{parentName:"p"},"handle_sigprof()")," function) that is executed whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"SIGPROF")," signal is received."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/time-slice-value"},"Quiz")),(0,r.kt)("p",null,"It is this handler that performs the context switch per se.\nLook at its code.\nIt first saves the context of the currernt thread:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},"ucontext_t *stored = &running->context;\nucontext_t *updated = (ucontext_t *) context;\n\nstored->uc_flags = updated->uc_flags;\nstored->uc_link = updated->uc_link;\nstored->uc_mcontext = updated->uc_mcontext;\nstored->uc_sigmask = updated->uc_sigmask;\n")),(0,r.kt)("p",null,"Then it places current thred in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ready")," queue and replaces it with the first thread in the same queue.\nThis algorithm (that schedules the first thread in the READY queue) is called ",(0,r.kt)("em",{parentName:"p"},"Round-Robin"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},"if (queue_enqueue(ready, running) != 0) {\n    abort();\n}\n\nif ((running = queue_dequeue(ready)) == NULL) {\n    abort();\n}\n")),(0,r.kt)("p",null,"The new ",(0,r.kt)("inlineCode",{parentName:"p"},"running")," thread is resumed upon setting the current context to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C"},"if (setcontext(&running->context) == -1) {\n    abort();\n}\n")),(0,r.kt)("p",null,"This is how scheduling is done!"),(0,r.kt)("h4",{id:"practice-another-time-slice"},"Practice: Another Time Slice"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Modify the time slice set to the timer to 2 seconds.\nRe-run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/libult/test_ult.c"),".\nNotice that now no context switch happens between the 2 created threads because they end before the timer can fire.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now change the ",(0,r.kt)("inlineCode",{parentName:"p"},"printer_thread()")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"test_ult.c")," to make it run for more than 2 seconds.\nSee that now the prints from the two threads appear intermingled.\nAdd prints to the ",(0,r.kt)("inlineCode",{parentName:"p"},"handle_sigprof()")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/libult/threads.c")," to see the context switch happen."))),(0,r.kt)("h2",{id:"arena"},"Arena"),(0,r.kt)("h3",{id:"threads-and-processes-clone"},"Threads and Processes: ",(0,r.kt)("inlineCode",{parentName:"h3"},"clone")),(0,r.kt)("p",null,"Let's go back to our initial demos that used threads and processes.\nWe'll see that in order to create both threads and processes, the underlying Linux syscall is ",(0,r.kt)("inlineCode",{parentName:"p"},"clone"),".\nFor this, we'll run both ",(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_threads")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_processes")," under ",(0,r.kt)("inlineCode",{parentName:"p"},"strace"),".\nAs we've already established, we're only interested in the ",(0,r.kt)("inlineCode",{parentName:"p"},"clone")," syscall:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../lab/support/sum-array/d$ strace -e clone ./sum_array_threads 2\nclone(child_stack=0x7f60b56482b0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[1819693], tls=0x7f60b5649640, child_tidptr=0x7f60b5649910) = 1819693\nclone(child_stack=0x7f60b4e472b0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[1819694], tls=0x7f60b4e48640, child_tidptr=0x7f60b4e48910) = 1819694\n\nstudent@os:~/.../lab/support/sum-array/d$ strace -e clone ./sum_array_processes 2\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f7a4e346650) = 1820599\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f7a4e346650) = 1820600\n")),(0,r.kt)("p",null,"We ran each program with an argument of 2, so we have 2 calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"clone"),".\nNotice that in the case of threads, the ",(0,r.kt)("inlineCode",{parentName:"p"},"clone")," syscall receives more arguments.\nThe relevant flags passed as arguments when creating threads are documented in ",(0,r.kt)("a",{parentName:"p",href:"https://man.archlinux.org/man/clone3.2.en"},(0,r.kt)("inlineCode",{parentName:"a"},"clone"),"'s man page"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CLONE_VM"),": the child and the parent process share the same VAS"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CLONE_{FS,FILES,SIGHAND}"),": the new thread shares the filesystem information, file and signal handlers with the one that created it\nThe syscall also receives valid pointers to the new thread's stack and TLS, i.e. the only parts of the VAS that are distinct between threads (although they are technically accessible from all threads).")),(0,r.kt)("p",null,"By contrast, when creating a new process, the arguments of the ",(0,r.kt)("inlineCode",{parentName:"p"},"clone")," syscall are simpler (i.e. fewer flags are present).\nRemember that in both cases ",(0,r.kt)("inlineCode",{parentName:"p"},"clone")," creates a new ",(0,r.kt)("strong",{parentName:"p"},"thread"),".\nWhen creating a process, ",(0,r.kt)("inlineCode",{parentName:"p"},"clone")," creates this new thread within a new separate address space."),(0,r.kt)("h3",{id:"libraries-for-parallel-processing"},"Libraries for Parallel Processing"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array/d/sum_array_threads.d"),' we spawned threads "manually" by using the ',(0,r.kt)("inlineCode",{parentName:"p"},"spawn")," function.\nThis is ",(0,r.kt)("strong",{parentName:"p"},"not")," a syscall, but a wrapper over the most common thread-management API in POSIX-based operating systems (such as Linux, FreeBSD, macOS): POSIX Threads or ",(0,r.kt)("inlineCode",{parentName:"p"},"pthreads"),".\nBy inspecting the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dlang/phobos/blob/352258539ca54e640e862f79b2b8ec18aafa7d94/std/concurrency.d#L618-L622"},"implementation of ",(0,r.kt)("inlineCode",{parentName:"a"},"spawn")),", we see that it creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Thread")," object, on which it calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," method.\nIn turn, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dlang/dmd/blob/cc117cd45c7d72ce5a87b775e65a9d13fa4d4424/druntime/src/core/thread/osthread.d#L454-L486"},(0,r.kt)("inlineCode",{parentName:"a"},"start()")," uses ",(0,r.kt)("inlineCode",{parentName:"a"},"pthread_create()"))," on POSIX systems."),(0,r.kt)("p",null,"Still, ",(0,r.kt)("inlineCode",{parentName:"p"},"pthread_create()")," is not yet a syscall.\nIn order to see what syscall ",(0,r.kt)("inlineCode",{parentName:"p"},"pthread_create()")," uses, check out ",(0,r.kt)("a",{parentName:"p",href:"#threads-and-processes-clone"},"this section at the end of the lab"),"."),(0,r.kt)("p",null,"Most programming languages provide a more advanced API for handling parallel computation.\nD makes no exception.\nIts standard library exposes the ",(0,r.kt)("a",{parentName:"p",href:"https://dlang.org/phobos/std_parallelism.html"},(0,r.kt)("inlineCode",{parentName:"a"},"std.parallelism")),", which provides a series of parallel processing functions.\nOne such function is ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," which splits an array between a given number of threads and applies a given operation to these chunks.\nIn our case, the operation simply adds the elements to an accumulator: ",(0,r.kt)("inlineCode",{parentName:"p"},"a + b"),".\nFollow and run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array/d/sum_array_threads_reduce.d"),"."),(0,r.kt)("p",null,"The number of threads is used within a ",(0,r.kt)("a",{parentName:"p",href:"https://dlang.org/phobos/std_parallelism.html#.TaskPool"},(0,r.kt)("inlineCode",{parentName:"a"},"TaskPool")),".\nThis structure is a thread manager (not scheduler).\nIt silently creates the number of threads we request and then ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," spreads its workload between these threads."),(0,r.kt)("p",null,"Now run the ",(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_threads_reduce")," binary using 1, 2, 4, and 8 threads as before.\nYou'll see lower running times than ",(0,r.kt)("inlineCode",{parentName:"p"},"sum_array_threads")," due to the highly-optimised code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," function.\nFor this reason and because library functions are usually much better tested than your own code, it is always preferred to use a library function for a given task."),(0,r.kt)("h3",{id:"shared-memory"},"Shared Memory"),(0,r.kt)("p",null,"As you remember from the ",(0,r.kt)("a",{parentName:"p",href:"../../data/"},"Data chapter"),", one way to allocate a given number of pages is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"mmap()")," syscall.\nLet's look at its ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/mmap.2.html"},"man page"),", specifically at the ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," argument.\nIts main purpose is to determine the way in which child processes interact with the mapped pages."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/mmap-cow-flag"},"Quiz")),(0,r.kt)("p",null,"Now let's test this flag, as well as its opposite: ",(0,r.kt)("inlineCode",{parentName:"p"},"MAP_SHARED"),".\nCompile and run the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/shared-memory/shared_memory.c"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"See the value read by the parent id different from that written by the child.\nModify the ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," parameter of ",(0,r.kt)("inlineCode",{parentName:"p"},"mmap()")," so they are the same.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a semaphore in the shared page and use it to make the parent signal the child before it can exit.\nUse the API defined in ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man0/semaphore.h.0p.html"},(0,r.kt)("inlineCode",{parentName:"a"},"semaphore.h")),".\n",(0,r.kt)("strong",{parentName:"p"},"Be careful!"),"\nThe value written and read previously by the child and the parent, respectively, must not change."))),(0,r.kt)("p",null,'One way of creating a shared semaphore is to place it within a shared memory area, as we\'ve just done.\nThis only works between "related" processes.\nIf you want to share a semaphore or other types of memory between any two processes, you need filesystem support.\nFor this, you should use ',(0,r.kt)("strong",{parentName:"p"},"named semaphores"),", created using ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/sem_open.3.html"},(0,r.kt)("inlineCode",{parentName:"a"},"sem_open()")),".\nYou'll get more accustomed to such functions in the ",(0,r.kt)("a",{parentName:"p",href:"../../app-interact/"},"Application Interaction chapter"),"."),(0,r.kt)("h3",{id:"mini-shell"},"Mini-shell"),(0,r.kt)("h4",{id:"fist-step-system-dissected"},"Fist Step: ",(0,r.kt)("inlineCode",{parentName:"h4"},"system")," Dissected"),(0,r.kt)("p",null,"You already know that ",(0,r.kt)("inlineCode",{parentName:"p"},"system")," calls ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"execve()")," to create the new process.\nLet's see how and why.\nFirst, we run the following command to trace the ",(0,r.kt)("inlineCode",{parentName:"p"},"execve()")," syscalls used by ",(0,r.kt)("inlineCode",{parentName:"p"},"sleepy_creator"),".\nWe'll leave ",(0,r.kt)("inlineCode",{parentName:"p"},"fork()")," for later."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"student@os:~/.../support/sleepy$ strace -e execve -ff -o syscalls ./sleepy_creator\n")),(0,r.kt)("p",null,"At this point you will get two files whose names start with ",(0,r.kt)("inlineCode",{parentName:"p"},"syscalls"),", followed by some numbers.\nThose numbers are the PIDs of the parent and the child process.\nTherefore, the file with the higher number contains logs of the ",(0,r.kt)("inlineCode",{parentName:"p"},"execve")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"clone")," syscalls issued by the parent process, while\nthe other logs those two syscalls when made by the child process.\nLet's take a look at them.\nThe numbers below will differ from those on your system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'student@os:~/.../support/sleepy:$ cat syscalls.2523393  # syscalls from parent process\nexecve("sleepy_creator", ["sleepy_creator"], 0x7ffd2c157758 /* 39 vars */) = 0\n--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=2523394, si_uid=1052093, si_status=0, si_utime=0, si_stime=0} ---\n+++ exited with 0 +++\n\nstudent@os:~/.../support/sleepy:$ cat syscalls.2523394  # syscalls from child process\nexecve("/bin/sh", ["sh", "-c", "sleep 10"], 0x7ffd36253be8 /* 39 vars */) = 0\nexecve("/usr/bin/sleep", ["sleep", "10"], 0x560f41659d40 /* 38 vars */) = 0\n+++ exited with 0 +++\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/who-calls-execve-parent"},"Quiz")),(0,r.kt)("p",null,"Now notice that the child process doesn't simply call ",(0,r.kt)("inlineCode",{parentName:"p"},'execve("/usr/bin/sleep" ...)'),".\nIt first changes its virtual address space (VAS) to that of a ",(0,r.kt)("inlineCode",{parentName:"p"},"bash")," process (",(0,r.kt)("inlineCode",{parentName:"p"},'execve("/bin/sh" ...)'),") and then that ",(0,r.kt)("inlineCode",{parentName:"p"},"bash")," process switches its VAS to ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep"),".\nTherefore, calling ",(0,r.kt)("inlineCode",{parentName:"p"},"system(<some_command>)")," is equivalent to running ",(0,r.kt)("inlineCode",{parentName:"p"},"<some_command>")," in the command line."),(0,r.kt)("p",null,"With this knowledge in mind, let's implement our own mini-shell.\nStart from the skeleton code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/mini-shell/mini_shell.c"),".\nWe're already running our Bash interpreter from the command line, so there's no need to ",(0,r.kt)("inlineCode",{parentName:"p"},"exec")," another Bash from it.\nSimply ",(0,r.kt)("inlineCode",{parentName:"p"},"exec")," the command."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/operating-systems-oer/Lab/Compute/quiz/mini-shell-stops-after-command"},"Quiz")),(0,r.kt)("p",null,'So we need a way to "save" the ',(0,r.kt)("inlineCode",{parentName:"p"},"mini_shell")," process before ",(0,r.kt)("inlineCode",{parentName:"p"},"exec()"),"-ing our command.\nFind a way to do this."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Hint"),":  You can see what ",(0,r.kt)("inlineCode",{parentName:"p"},"sleepy")," does and draw inspiration from there.\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"strace")," to also list the calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"clone()")," perfromed by ",(0,r.kt)("inlineCode",{parentName:"p"},"sleepy")," or its children.\n",(0,r.kt)("a",{parentName:"p",href:"#threads-and-processes-clone"},"Remember")," what ",(0,r.kt)("inlineCode",{parentName:"p"},"clone()")," is used for and use its parameters to deduce which of the two scenarios happens to ",(0,r.kt)("inlineCode",{parentName:"p"},"sleepy"),". ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Moral of the story"),": We can add another step to the moral of ",(0,r.kt)("a",{parentName:"p",href:"#practice-fork"},"our previous story"),".\nWhen spawning a new command, the call order is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parent: ",(0,r.kt)("inlineCode",{parentName:"li"},"fork()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"exec()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"wait()")),(0,r.kt)("li",{parentName:"ul"},"child: ",(0,r.kt)("inlineCode",{parentName:"li"},"exit()"))),(0,r.kt)("h4",{id:"command-executor-in-another-language"},"Command Executor in Another language"),(0,r.kt)("p",null,"Now implement the same functionality (a Bash command executor) in any other language, other than C/C++.\nUse whatever API is provided by your language of choice for creating and waiting for processes."),(0,r.kt)("h3",{id:"the-gil"},"The GIL"),(0,r.kt)("p",null,"Throughout this lab you might have noticed that there were no thread exercises ",(0,r.kt)("em",{parentName:"p"},"in Python"),".\nIf you did, you probably wondered why.\nIt's not because Python does not support threads, because it does, but because of a mechanism called the ",(0,r.kt)("strong",{parentName:"p"},"Global Interpreter Lock"),", or GIL.\nAs its name suggests, this is a lock implemented inside most commonly used Python interpreter (CPython), which only allows ",(0,r.kt)("strong",{parentName:"p"},"one")," thread to run at a given time.\nAs a consequence, multithreaded programs written in Python run ",(0,r.kt)("strong",{parentName:"p"},"concurrently"),", not in parallel.\nFor this reason, you will see no speedup even when you run an embarrassingly parallel code in parallel."),(0,r.kt)("p",null,"However, keep in mind that this drawback does not make threads useless in Python.\nThey are still useful and widely used when a process needs to perform many IO-bound tasks (i.e.: tasks that involve many file reads / writes or network requests).\nSuch tasks run many blocking syscalls that require the thread to switch from the RUNNING state to WAITING.\nDoing so voluntarily makes threads viable because they rarely run for their entire time slice and spend most of the time waiting for data.\nSo it doesn't hurt them to run concurrently, instead of in parallel."),(0,r.kt)("p",null,"Do not make the confusion to believe threads in Python are ",(0,r.kt)("a",{parentName:"p",href:"#user-level-vs-kernel-level-threads"},"user-level threads"),".\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread"},(0,r.kt)("inlineCode",{parentName:"a"},"threading.Thread")),"s are kernel-level threads.\nIt's just that they are forced to run concurrenntly by the GIL."),(0,r.kt)("h4",{id:"practice-array-sum-in-python"},"Practice: Array Sum in Python"),(0,r.kt)("p",null,"Let's first probe this by implementing two parallel versions of the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/sum-array/python/sum_array_sequential.py"),".\nOne version should use threads and the other should use processes.\nRun each of them using 1, 2, 4, and 8 threads / processes respectively and compare the running times.\nNotice that the running times of the multithreaded implementation do not decrease.\nThis is because the GIL makes it so that those threads that you create essentially run sequentially."),(0,r.kt)("p",null,"The GIL also makes it so that individual Python instructions are atomic.\nRun the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/python/race_condition.py"),".\nEvery time, ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," will be 0 because the GIL doesn't allow the two threads to run in parallel and reach the critical section at the same time.\nThis means that the instructions ",(0,r.kt)("inlineCode",{parentName:"p"},"var += 1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"var -= 1")," become atomic."),(0,r.kt)("h4",{id:"but-why"},"But Why?"),(0,r.kt)("p",null,"Unlike Bigfoot, or the Loch Ness monster, we have proof that the GIL is real.\nAt first glance, this seems like a huge disadvantage.\nWhy force threads to run sequentially?\nThe answer has to do with memory management.\nIn the ",(0,r.kt)("a",{parentName:"p",href:"../../data"},"Data chapter"),", you learned that one way of managing memory is via ",(0,r.kt)("em",{parentName:"p"},"garbage collection")," (GC).\nIn Python, the GC uses reference counting, i.e. each object also stores the number of live pointers to it (variables that reference it).\nYou can see that this number needs to be modified atomically by the interpreter to avoid race conditions.\nThis involves adding locks to ",(0,r.kt)("strong",{parentName:"p"},"all")," Python data structures.\nThis large number of locks doesn't scale for a language as large and open as Python.\nIn addition, it also introduces the risk of ",(0,r.kt)("em",{parentName:"p"},"deadlocks"),".\nYou can read more on this topic ",(0,r.kt)("a",{parentName:"p",href:"https://realpython.com/python-gil/"},"in this article")," and if you think eliminating the GIL looks like an easy task, which should have been done long ago, check the requirements ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.python.org/moin/GlobalInterpreterLock"},"here"),".\nThey're not trivial to meet."),(0,r.kt)("p",null,"Single-threadedness is a common trope for interpreted languages to use some sort of GIL.\n",(0,r.kt)("a",{parentName:"p",href:"https://git.ruby-lang.org/ruby.git"},"Ruby MRI, the reference Ruby interpreter")," uses a similar mechanism, called the ",(0,r.kt)("a",{parentName:"p",href:"https://ivoanjo.me/blog/2022/07/17/tracing-ruby-global-vm-lock/"},"Global VM Lock"),".\nJavaScript is even more straightforward: it is single-threaded by design, also for GC-related reasons.\nIt does, however support asynchronous actions, but these are executed on the same thread as every other code.\nThis is implemented by placing each instruction on a ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/swlh/what-does-it-mean-by-javascript-is-single-threaded-language-f4130645d8a9"},"call stack"),". "),(0,r.kt)("h3",{id:"atomic-assembly"},"Atomic Assembly"),(0,r.kt)("p",null,"No, this section is not about nukes, sadly :(.\nInstead, we aim to get accustomed to the way in which the x86 ISA provides atomic instructions."),(0,r.kt)("p",null,"This mechanism looks very simple.\nIt is but ",(0,r.kt)("strong",{parentName:"p"},"one instruction prefix"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"lock"),".\nIt is not an instruction with its own separate opcode, but a prefix that slightly modifie the opcode of the following instructions to make the CPU execute it atomically (i.e. with exclusive access to the data bus)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lock")," must only be place before an instruction that executes a ",(0,r.kt)("em",{parentName:"p"},"read-modify-write")," action.\nFor example, we cannot place it before a ",(0,r.kt)("inlineCode",{parentName:"p"},"mov")," instruction, as the action of a ",(0,r.kt)("inlineCode",{parentName:"p"},"mov")," is simply ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"write"),".\nInstead, we can place it in front of an ",(0,r.kt)("inlineCode",{parentName:"p"},"inc")," instruction if its operand is memory."),(0,r.kt)("p",null,"Look at the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/asm/race_condition_lock.S"),".\nIt's an Assembly equivalent of the code you've already seen many times so far (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"support/race-condition/d/race_condition.d"),").\nAssemble and run it a few times.\nNotice the different results you get."),(0,r.kt)("p",null,"Now add the ",(0,r.kt)("inlineCode",{parentName:"p"},"lock")," prefix before ",(0,r.kt)("inlineCode",{parentName:"p"},"inc")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dec"),".\nReassemble and rerun the code.\nAnd now we have synchronised the two threads by leveraging CPU support."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TODO add this section to the lecture")),(0,r.kt)("h3",{id:"synchronisation---thread-safe-data-structure"},"Synchronisation - Thread-Safe Data Structure"),(0,r.kt)("p",null,"Now it's time for a fully practical exercise.\nGo to ",(0,r.kt)("inlineCode",{parentName:"p"},"support/CLIST/"),".\nIn the file ",(0,r.kt)("inlineCode",{parentName:"p"},"clist.c")," you'll find a simple implementation of an array list.\nAlthough correct, it is not (yet) thread-safe."),(0,r.kt)("p",null,"The code in ",(0,r.kt)("inlineCode",{parentName:"p"},"test.c")," verifies its single-threaded correctness while the one in ",(0,r.kt)("inlineCode",{parentName:"p"},"test_parallel.c")," verifies it works properly with multiple threads.\nYour task is to synchronise this data structure using whichever primitives you like.\nTry to keep the implementation efficient.\nAim to decrease your running times as much as you can."))}d.isMDXComponent=!0},9886:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/100-percent-cpu-1138186529f154d864f643179e25cea1.jpeg"},2163:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/app-os-cpu-interaction-ca7fbdbb7da380e0992c95467ef267ce.svg"}}]);